const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testBackupConfig() {
  try {
    console.log('üîç Verificando tablas de configuraci√≥n en el backup...')

    // Verificar SiteConfig
    const siteConfigs = await prisma.siteConfig.findMany()
    console.log(`üìä SiteConfig: ${siteConfigs.length} registros`)
    
    if (siteConfigs.length > 0) {
      console.log('‚úÖ SiteConfig tiene datos:')
      siteConfigs.slice(0, 3).forEach(config => {
        console.log(`  - ${config.key}: ${config.value.substring(0, 50)}...`)
      })
    } else {
      console.log('‚ö†Ô∏è SiteConfig est√° vac√≠a')
    }

    // Verificar GlobalPaymentProfile
    const globalPaymentProfiles = await prisma.globalPaymentProfile.findMany()
    console.log(`üìä GlobalPaymentProfile: ${globalPaymentProfiles.length} registros`)

    // Verificar CommissionSettings
    const commissionSettings = await prisma.commissionSettings.findMany()
    console.log(`üìä CommissionSettings: ${commissionSettings.length} registros`)

    // Simular el proceso de backup
    console.log('\nüß™ Simulando proceso de backup...')
    
    const backupData = {
      timestamp: new Date().toISOString(),
      version: '1.0',
      tables: {}
    }

    // Probar SiteConfig espec√≠ficamente
    try {
      const siteConfigData = await prisma.siteConfig.findMany()
      backupData.tables['SiteConfig'] = siteConfigData
      console.log(`‚úÖ SiteConfig incluida en backup: ${siteConfigData.length} registros`)
    } catch (error) {
      console.error('‚ùå Error al obtener SiteConfig:', error)
    }

    // Probar con el nombre correcto del modelo
    try {
      const siteConfigData = await prisma.siteConfig.findMany()
      backupData.tables['SiteConfig'] = siteConfigData
      console.log(`‚úÖ SiteConfig (modelo correcto): ${siteConfigData.length} registros`)
    } catch (error) {
      console.error('‚ùå Error con modelo correcto:', error)
    }

    console.log('\nüìã Resumen del backup:')
    console.log(`- SiteConfig: ${backupData.tables['SiteConfig']?.length || 0} registros`)
    
    if (backupData.tables['SiteConfig']?.length > 0) {
      console.log('‚úÖ Las configuraciones del sitio S√ç est√°n incluidas en el backup')
    } else {
      console.log('‚ùå Las configuraciones del sitio NO est√°n incluidas en el backup')
    }

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testBackupConfig()
